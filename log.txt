功能相关：

接下来需要完成移动请求、广播等等，在完成移动相关之后，需要把地图场景管理完善一下。
然后需要检测一下目前写的这些架构是否合理，对错误的处理，还有内存性能等方面的调整。  --2017.1.6

json打包数据，敏感词检查，aoi_handler这边需要通过sharemap来同步每个视野内玩家的坐标 --2017.1.18
--json打包已加，sharemap已加，敏感词检查已加，同步坐标已加

热更新、cluster --2017.1.18

退出流程要做好，注意先后顺序，目标退出顺序是否并发 --2017.2.12

搭建map、player相关的框架，需要对现有的一些框架进行修改，理清条理，弄一个清晰、易于扩展的结构 --2017.4.7

发消息统一一下，现在agent有发消息，map也有发消息，看能不能并在一起 --2017.5.19

player和monster等obj的aoi消息整理一下  --2017.5.20
--初步统一了一下，接下来还要继续调整结构

warning:

function obj:updateaoilist()这个理清一下

200个怪物就map就overload了........

cserver那边，虽然launch了2个cserver，但是传入参数的时候，居然会覆盖上一次的，这边要看看为什么，
这边导致了caoi中，返回的消息都去call最后一个map了
--service_aoi中的变量addr和cookie指向同一个地址了
--cookie这边create的时候new了一个，在release的时候释放一下内存应该就可以了
--addr这个用的是skynet_context中的handle-1

sharedata改掉，使用最新的datasheet

学习使用MemoryHook来检查内存，先检查一下内存问题吧。

msgsender中保留了发送的session信息，如果消息过多，内存会溢出的，这边看是怎么处理一下，应该需要把老、旧的消息移除。
server那边开着不懂，monster_run的时候，内存会涨，导致map内存溢出，应该也是这个问题，需要解决。
--修改了sproto.lua,判断是否有返回，有返回的时候就存session，当回复之后，清理掉
--存储的session加了长度验证，超过最大长度的时候，打印提示，并删除session值最小的一条

client发给server的消息带的session和server发给client的session貌似不能独立，需要整合
不然的话，会出现session冲突。
--在断线重连中，例如有版本1的时候，有session为5的response，
--如果在版本2中，server给client发送了session为5的request，那么在client回复的时候，会将之前的response回复过去
--在玩家挤下线的时候，必出
--这边将msgserver中do_request这里每次都清理掉了response，等于是没有被记录..这个看以后怎么搞

aoi中，广播的时候，有判断cansend，这边看能不能直接将不能send的aoi对象不添加到list中，避免不必要的call

send的msg中，在session前面带了一个无符号的char类型数值，
这边用于调试用的，前端可以不用发过来的，但是后端也需要对应的修改一下。

msgserver那边handler.disconnect把fd设置为nil了，并没有调用server.logout中的gateserver.closeclient(u.fd)，除非是别人挤下去的。

会出现Unknown session:5的错误，初步判断，是session的问题导致server这边resend response了。

monster:delfromaoilist(objtempid) essert failed
./server/lualib/obj/aoifunc.lua:140: in method 'delfromaoilist'
./server/lualib/map/aoi_handler.lua:60: in local 'f

./server/lualib/obj/aoifunc.lua:20: in method 'addtoreaderlist'
./server/lualib/map/aoi_handler.lua:52: in local 'f'
./server/service/map.lua:106: in upvalue 'f'
./3rd/skynet/lualib/skynet.lua:111: in function <./3rd/skynet/lualib/skynet.lua:105>
stack traceback:
[C]: in function 'assert'
./3rd/skynet/lualib/skynet.lua:533: in function 'skynet.dispatch_message'

sproto消息可以带回应参数，看一下如果带了该参数，但是前端不回应会怎么样
--残留下来，客户端下线后应该把整个 host 对象扔掉
--这边处理了一下，需要检查是否被丢弃了

发消息的地方需要区分是否需要回应吗？
这边如果不区分的话，全部给session，那么sproto那边的__session一直会给复制为true，
不断增加，这样应该不正确吧...看一下怎么处理一下
和上面一条一样，但是map这边不能丢...client能丢...

client中dispatch_message那边获取的id和sessionid有时候不一样，要看一下为什么，是不是有问题
--现在没有了，注意观察

client的延迟检测那边，如果连续发送三次request会出现session冲突
--可能是gate那边需要加队列

agent handler那边，local变量再二次登陆的时候，貌似有问题，delay_run中的alreadytestnum成了全局变量了

这边表现目前看起来没问，实际obj中aoilist是的对象正不正确还有待检查
obj移动的时候，广播过了pos，所以client这边应该没问题
如果aoilist这边出问题，可能会影响到战斗这一块，选择对象的时候，是否可选取的判断

monster那边如果先createwriter再setaoiobj会出错，但是player那边不会，需要查一下为原因
--这边看了一下，如果后期setpos之后，会是正确的
--也就是setaoiobj的时候，pos值没有起到作用？

session_id这个东西搞清楚，看是怎么用，要不要用。

characterleave这个消息中的tempid也许可以写成数组形式的

msgagent这边，能用send的地方需要使用send，如果send的操作中有对后面有影响的话，只能用call
service启动、关闭相关可以都用call，确保顺序执行

上下线的时候，出现过报错，在 _G.instance.aoi.updateagentlist() 提示user为nil，应该不容易出现

aoi这边，近距离移动的时候，也会发生callback，检查是否正确

idmgr那边写了三种实现的方法...不知道哪种更好？或者都一样？

aoi那边，看是player发送mapready之后再加入到aoi中还是以w模式先加到aoi，ready之后再设置为wm模式

aoi总感觉乱乱的...有时间理一下..

addaoiobj那边进入过两次..可能发了两次updateinfo()？有空看看
--updateinfo()确实会发多次，不过不知道是不是addaoiobj那边进入过两次
--因为在characterready这边会请求一次，已经注释掉了，没有必要
--client进入之后，马上moveto了也会导致updateinfo

留意一下，redispool那边貌似如果使用的地方的语法错误，这边就得不到返回，假死

有条件的时候需要测试视野相关的上下线，完善aoi相关机制

delaoiobj那边可能需要设置一下玩家为下线状态，然后characterwriter:commit()一下。
然后在updateagentlist中判断玩家的在线状态

aoi的cservice里面写的多线程触发message_update失败，使用的是lua那边call cservice。
这边可能需要看一下，能不能不走call，直接在cservice那边使用多线程update

aoi那边characterleave中，调用delaoiobj，使用call替换send后，
client断线重连会导致loginserver报already login，
这边需要处理一下，不然玩家在某些情况下，再也进不了服务器了。

退出流程和进入流程需要再检查一下流程，该call的使用call，该send改用send

是不是应该为每个函数加注释呢...有点小纠结...

看怎么才能触发cservice的release

由于伪并发...msgagent这边在疯狂的连接过程中会出现玩家已经被挤下线了，user什么的已经清空了，
但是requestqueue中有请求还在处理，那么这个时候使用user什么的就会出问题。
主要是因为cmd和request不在一个queue导致的。但是如果这两个在同一个queue又会导致锁死。
目前只会在极端情况下才会出现这个问题，主要是cmd和request的消息和并发的执行导致的一系列问题。
看能不能做到将cmd和request的消息合并到一个queue中去。如果合并了，就需要注意锁死问题了。
不能出现在request流程中去call自己的cmd命令
--设置agent的状态，在agent没有完全退出的时候，不加入agentpool
--貌似并不是agent没有完全退出导致的问题
--而是agent退出了，但是queue里面还有任务没有做完，导致的错误
--这边给agent添加状态，在某些状态下才执行消息
--这边基本没什么问题了，以后还得继续测试

在玩家请求退出游戏的时候，最后玩家是收不到退出返回的，得看看能不能让玩家收到退出返回

error：

还没有做服务器退出处理，这边找到一个退出方法，在debug control里面可以call服务，
为服务写个退出命令，去call主服务，然后调用其他的服务依次退出即可

需要注意，aoi这边，如果玩家特别多的时候的性能，还有同一个地图，在N群玩家进出之后的性能
主要是貌似每次update之后，如果马上message会有性能影响？得测试一下

dbmgr那边的服务可能需要加队列

找到原因的：
aoi这边，当添加的对象很多的时候，及时移除对象，内存并没有减少到期望值
--里面的hashmap增长了

move_handler那边看到角色的pos值为string，应该是数据库那边返回的是这个类型，这边需要查找并修复一下
--这个是redis这边取出来的结果为string，在每次获取结果的时候，都根据mysql中的数据类型进行一次转化

两个map共用了一个aoi...两个方案解决：
一个是在lua-aoi中，为每个map单独创建space；
一个是重写，把aoi写成CSERVICE
最好重写CSERVICE吧，这个总是要实现的..趁现在就搞清楚
因为公用还导致地图退出的时候，多次release aoi的core dump
--重写了cserver

service_aoi里面，callback那里返回的字符串的结尾有很多空格..虽然可以想办法过滤掉，但是最好弄清楚为什么会有。
还有那边的内存申请用的是skynet_malloc，如果给skynet_send传的sz重新计算一下大小，是可以避免这个空格的，但是不知道会不会导致内存泄漏。
--事先计算好实际需要申请的内存大小

msgagent那边有一个task，是sharedata


client那边，unpack_package中text:sub(3,2+s - 4)这里-4了，是去掉了session，这边看能不能这里不减，
在后面的地方拆除session来，用recv_response拆
--已处理

发送消息的时候，额外增加了session id，应该是可以去掉的，这样可以避免每次消息多4个字节
--msgserver那边需要这个session做处理，所以不能去掉

client退出重新登录的时候，run里面的delaytest没有继续跑
--alreadytestnum的bug
